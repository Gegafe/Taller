/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package taller.vista;

import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import taller.modelo.Aparato;
import taller.modelo.AparatoData;
import taller.modelo.Conexion;
import taller.modelo.Reparacion;
import taller.modelo.ReparacionData;

/**
 *
 * @author User
 */
public class ListaAparatosView extends javax.swing.JInternalFrame {
    private DefaultTableModel modelo;

    /**
     * Creates new form ListaAparatosView
     */
    public ListaAparatosView() {
        initComponents();
        modelo = new DefaultTableModel();
        ArmaCabeceraDeTabla();
        Consulta(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jCheckBox1 = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        chkEstado = new javax.swing.JCheckBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        tAparato = new javax.swing.JTable();

        jCheckBox1.setText("jCheckBox1");

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);

        jLabel1.setFont(new java.awt.Font("SansSerif", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 51, 153));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Aparatos por Estado");

        jLabel2.setText("Estado:");

        chkEstado.setText("Sin Reparar");
        chkEstado.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                chkEstadoMouseClicked(evt);
            }
        });

        tAparato.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id Aparato", "Tipo de Aparato", "Nro. de Serie", "Costo Total"
            }
        ));
        jScrollPane1.setViewportView(tAparato);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(chkEstado, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(107, 107, 107))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 385, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkEstado)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ArmaCabeceraDeTabla(){
        ArrayList<Object> columnas = new ArrayList<>();
        columnas.add("Id");
        columnas.add("Tipo de Aparato");
        columnas.add("Nro. de Serie");
        columnas.add("Costo Total");
        
        for (Object columna : columnas) {
            modelo.addColumn(columna);
        }
        tAparato.setModel(modelo);
        
    }
    
    private void BorrarFilasTabla(){
        int a = tAparato.getRowCount() -1;
        for(int i=a; i>=0; i--){
            modelo.removeRow(i);
        }
    }
    
    private void CargaDatosTabla(ArrayList<Aparato> listaAparatos){
        BorrarFilasTabla();
        
        for (Aparato ap : listaAparatos) {
            modelo.addRow(new Object[]{ap.getIdAparato(), ap.getTipoAparato(), ap.getNroSerie(), SumaServicios(ap)});
        }
    }
    
    private void Consulta(boolean estado){
        try {
            BorrarFilasTabla();
            Conexion con = new Conexion();
            AparatoData ad = new AparatoData(con);
            ArrayList<Aparato> listaAparato;
            
            if (estado) {
                listaAparato = (ArrayList) ad.obtenerAparatosReparados();
            } else {
                listaAparato = (ArrayList) ad.obtenerAparatosSinReparar();
            }
            CargaDatosTabla(listaAparato);
            
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ListaAparatosView.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private double SumaServicios(Aparato a){
        double costoServicios = 0.0;
        try {
            Conexion con = new Conexion();
            ReparacionData rd = new ReparacionData(con);
            ArrayList<Reparacion> listaRep = (ArrayList)rd.obtenerListaDeReparacion();
            listaRep.removeIf(r -> r.getAparato().getIdAparato() != a.getIdAparato());
            for (Reparacion rep : listaRep) {
                costoServicios += rep.getServicio().getCosto();
            }
            
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ListaAparatosView.class.getName()).log(Level.SEVERE, null, ex);
        }   
        return costoServicios;
    }
    
    private void chkEstadoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_chkEstadoMouseClicked
        if (chkEstado.isSelected()) {
            chkEstado.setText("Reparado");
        } else {
            chkEstado.setText("Sin Reparar");
        }
        Consulta(chkEstado.isSelected());
    }//GEN-LAST:event_chkEstadoMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox chkEstado;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tAparato;
    // End of variables declaration//GEN-END:variables
}
